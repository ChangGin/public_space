
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.*
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.os.Environment
import android.os.Parcelable
import android.text.Layout
import android.text.SpannableString
import android.text.style.ForegroundColorSpan
import android.util.AttributeSet
import android.util.Log
import android.util.TypedValue
import android.view.Menu
import android.view.MenuItem
import android.view.View
import android.widget.LinearLayout
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.ActionBar
import androidx.appcompat.app.ActionBarDrawerToggle
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.widget.Toolbar
import androidx.coordinatorlayout.widget.CoordinatorLayout
import androidx.core.content.ContextCompat
import androidx.core.content.pm.PackageInfoCompat
import androidx.core.view.GravityCompat
import androidx.core.view.isGone
import androidx.core.view.isNotEmpty
import androidx.drawerlayout.widget.DrawerLayout
import androidx.fragment.app.DialogFragment
import androidx.recyclerview.widget.ItemTouchHelper
import androidx.recyclerview.widget.ItemTouchHelper.ACTION_STATE_DRAG
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.gms.ads.FullScreenContentCallback
import com.google.android.gms.ads.LoadAdError
import com.google.android.material.behavior.HideBottomViewOnScrollBehavior
import com.google.android.material.floatingactionbutton.FloatingActionButton
import com.google.android.material.navigation.NavigationView
import com.google.android.play.core.review.ReviewInfo
import com.google.android.play.core.review.ReviewManagerFactory
import com.google.android.play.core.review.testing.FakeReviewManager
import com.google.android.gms.tasks.Task
import com.google.firebase.analytics.FirebaseAnalytics
import com.google.firebase.ktx.Firebase
import com.google.gson.FieldNamingPolicy
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import kotlinx.coroutines.*
import java.io.BufferedReader
import java.io.File
import java.io.FileInputStream
import java.io.InputStreamReader
import java.text.SimpleDateFormat
import java.util.*
import kotlin.collections.ArrayList
import kotlin.coroutines.CoroutineContext
import kotlin.random.Random


class ListActivity : AppCompatActivity(), CoroutineScope ,PopupDialogFragment.DialogListener {

    private val job = Job()
    override val coroutineContext: CoroutineContext
        get() = Dispatchers.Main + job

    private lateinit var savePath:String
    private var sd:Boolean = false
    private var pass:Boolean = true
    private var isRestart:Boolean = false
    private var isBackground:Boolean = true
    private var isLucky:Boolean = false
    private lateinit var charaCode:String
    private var isTimeStamp = true
    private var isTrash:Boolean = true
    private lateinit var sortOrder:String
    private var isPremium = false
    private var notificationCount = 0

    private var notificationConfig = 0
    private var isNotification = false
    private lateinit var notificationIcon:MenuItem

    private var dialogAction = 0

    private var directory = ""
    private var parentDirectory:MutableList<String> = mutableListOf()
    private var directoryNames:MutableList<String> = mutableListOf()
    private var order = 0
    private var filesSize = 0

    private var directoryName = ""
    private var trash = ""
    private var trashFileName = ""//ゴミ箱内のファイルをタップ時一時的に保持する
    private var trashDeadLine = 3//ごみ箱の保管期限
    private var trashLimit = 5//ごみ箱の最大保管数

    private var searchWord = ""//検索ワード保持用

    private lateinit var dataList:MutableList<ItemData>
    private lateinit var fullDataList:MutableList<ItemData>
    private lateinit var searchDataList:MutableList<ItemData>
    private var recyclerView:RecyclerView? = null
    private lateinit var adapter:CustomAdapter

    private lateinit var pankuzu:TextView
    private lateinit var pankuzuText:String

    private lateinit var hintPanel:TextView
    private lateinit var trashClearText:TextView

    private lateinit var drawerLayout: DrawerLayout
    private lateinit var badgeDrawerArrowDrawable: BadgeDrawerArrowDrawable//通知バッジ有りのカスタムトグル
    private lateinit var fab:FloatingActionButton
    private var isDrawer = false//ドロワーを開いているか

    private lateinit var ith:ItemTouchHelper
    private var state:Parcelable? = null

    private var folderEditMode = false
    private var multipleSelectionMode = false//複数選択モード
    private lateinit var multipleDeleteIcon:MenuItem
    private lateinit var multipleMoveIcon:MenuItem

    private var isReview = false
    private var reviewCount = 0

    override fun onCreate(savedInstanceState: Bundle?) {
        setTheme(ThemeController().loadTheme(this))
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        drawerLayout = findViewById<DrawerLayout>(R.id.drawer_layout)
        val drawer = findViewById<NavigationView>(R.id.drawer)
        val toolbar = findViewById<Toolbar>(R.id.toolbar)
        setSupportActionBar(toolbar)//カスタムtoolbarをセット

        hintPanel = findViewById(R.id.hint_panel)
        trashClearText = findViewById(R.id.trash_clear)
        trash = resources.getString(R.string.trash)

        val versionText = findViewById<TextView>(R.id.version_text)
        val pm = this.packageManager
        val pi = pm.getPackageInfo(this.packageName,PackageManager.GET_META_DATA)
        versionText.text = "ver." + pi.versionName//バージョンを記載
        versionCode = PackageInfoCompat.getLongVersionCode(pi).toInt()//バージョンコード取得

        val drawerToggle:ActionBarDrawerToggle = object:ActionBarDrawerToggle(//サイドメニュー呼び出しトグル
                this,
                drawerLayout,
                toolbar,
                R.string.drawer_open,
                R.string.drawer_close

        ){
            override fun onDrawerOpened(drawerView: View) {
                super.onDrawerOpened(drawerView)
                isDrawer = true
            }
            override fun onDrawerClosed(drawerView: View) {
                super.onDrawerClosed(drawerView)
                isDrawer = false
            }
        }
        drawerToggle.isDrawerIndicatorEnabled = true
        drawerLayout.addDrawerListener(drawerToggle)
        drawerToggle.syncState()
        notificationIcon = drawer.menu.findItem(R.id.side_menu_notification)//通知用アイコン

        if (!::badgeDrawerArrowDrawable.isInitialized){
            badgeDrawerArrowDrawable = BadgeDrawerArrowDrawable(this)//通知バッジ有りのカスタムトグル
        }
        drawerToggle.drawerArrowDrawable = badgeDrawerArrowDrawable//カスタムトグルをセット
//        badgeDrawerArrowDrawable.backgroundColor = ContextCompat.getColor(this, R.color.colorAccent)//通知バッジの色
        val typedValue = TypedValue()
        var accentColor = 0
        if(this.theme.resolveAttribute(R.attr.colorAccent, typedValue, true)){//Themeのアクセントカラーを取得
            accentColor = typedValue.data
        }else{
            accentColor = Color.RED
        }
        badgeDrawerArrowDrawable.backgroundColor = accentColor//通知バッジの色
        badgeDrawerArrowDrawable.setEnabled(false)//最初は消しておく
        //badgeDrawerArrowDrawable.setText("1")

        drawer.setNavigationItemSelectedListener {//サイドメニュー押下時
            if(multipleSelectionMode){
                //複数選択中に複数選択モード以外のサイドメニュー押下で複数選択モード終了
                if (it.itemId != R.id.side_menu_select){
                    changeMultipleSelectionMode(false)//複数選択を終了
                }
            }
            if (folderEditMode){
                if (it.itemId != R.id.side_menu_edit_dir){
                    folderEditMode = false
                }
            }
            when(it.itemId){
                R.id.side_menu_new_memo -> {//新規メモ作成
                    if (directory != "/$trash"){//ゴミ箱以外なら新規作成可
                        isBackground = false
                        val intent = Intent(this,EditMemoActivity::class.java)

                        val result = resources.getString(R.string.search_result)
                        if (directory.startsWith("/$result")){//検索→新規作成時はホームディレクトリに作成
                            intent.putExtra("DIRECTORY","")//ホームディレクトリを渡す
                        }else{
                            intent.putExtra("DIRECTORY",directory)
                        }
                        startActivity(intent)
                    }
                }
                R.id.side_menu_new_dir -> {//フォルダ作成用ダイアログ
                    if(directory != "/$trash"){
                        showCustomDialog(3)
                    }
                }
                R.id.side_menu_edit_dir -> {//フォルダ編集モード
                    if (folderEditMode){
                        folderEditMode = false
                        Toast.makeText(this,R.string.msg_directory_edit_finish,Toast.LENGTH_SHORT).show()
                    }else{
                        folderEditMode = true
                        Toast.makeText(this,R.string.msg_directory_edit_start,Toast.LENGTH_SHORT).show()
                    }
                }
                R.id.side_menu_select -> {//複数選択モード
                    changeMultipleSelectionMode(!multipleSelectionMode)
                    if (multipleSelectionMode){
                        Toast.makeText(this,R.string.msg_multiple_mode_on,Toast.LENGTH_SHORT).show()
                    }else{
                        Toast.makeText(this,R.string.msg_multiple_mode_off,Toast.LENGTH_SHORT).show()
                    }
                }
                R.id.side_menu_search -> {//検索
                    if (isPremium){
                        showCustomDialog(18)//検索ダイアログ
                    }else{
                        showCustomDialog(17)//メンバーシップ限定
                    }
                }
                R.id.side_menu_trash -> {//ゴミ箱
                    parentDirectory.clear()
                    directory = "/$trash"//ディレクトリを変更

                    if(isPremium){
                        hintPanel.setText(R.string.hint_panel_trash_premium)
                    }else {
                        hintPanel.setText(R.string.hint_panel_trash)
                    }
                    reloadList()

                }
                R.id.side_menu_setting -> {//設定画面へ
                    isBackground = false
                    val intent = Intent(this,SettingActivity::class.java)
                    startActivity(intent)
                }
                R.id.side_menu_notification -> {//お知らせへ
                    isBackground = false
                    if (isNotification){//新規お知らせがあるとき
                        getSharedPreferences("user_data", Context.MODE_PRIVATE).edit().apply{
                            putInt("pref_key_notification",notificationConfig)
                            commit()
                        }
                        notificationIconChange(false)//お知らせを既読にする
                    }
                    val intent = Intent(this,HelpActivity::class.java)
                    intent.putExtra("page","notification")
                    startActivity(intent)
                }
                R.id.side_menu_updates -> {//更新情報へ
                    isBackground = false
                    val intent = Intent(this,HelpActivity::class.java)
                    intent.putExtra("page","updates")
                    startActivity(intent)
                }
            }
            drawerLayout.closeDrawer(GravityCompat.START)
            true
        }

        trashClearText.setOnClickListener {//ごみ箱を空にする
            Log.d("trashClear","click")
            showCustomDialog(12)
        }

        ith = ItemTouchHelper(simpleCallback())//並べ替えヘルパー

        pankuzu = findViewById(R.id.pankuzu)

        fab = findViewById<FloatingActionButton>(R.id.fab)
        fab.setOnClickListener{
            folderEditMode = false//フォルダ編集を終了
            if(multipleSelectionMode){
                changeMultipleSelectionMode(false)//複数選択を終了
            }
            if (directory != "/$trash"){//ゴミ箱以外なら新規作成可
                Log.d("fab","fab")
                isBackground = false
                val intent = Intent(this,EditMemoActivity::class.java)

                val result = resources.getString(R.string.search_result)
                if (directory.startsWith("/$result")){//検索→新規作成時はホームディレクトリに作成
                    intent.putExtra("DIRECTORY","")//ホームディレクトリを渡す
                }else{
                    intent.putExtra("DIRECTORY",directory)
                }
                startActivity(intent)
            }
        }

        if (!intent.getStringExtra("DIRECTORY").isNullOrEmpty()){
            directory = intent.getStringExtra("DIRECTORY")!!
            Log.d("directory",directory)
        }

        if (savedInstanceState != null){
            parentDirectory = savedInstanceState.getStringArray("parent")!!.toMutableList()
            directory = savedInstanceState.getString("directory","")
        }

    }

    override fun onResume() {
        super.onResume()
        Log.d("method","onResume")
        isBackground = true
        loadPref()

        reloadList()//リストをリロードする

    }

    override fun onPause() {
        super.onPause()
        Log.d("method","onPause")
        state = recyclerView?.layoutManager?.onSaveInstanceState()//スクロール位置の保存
        recyclerView = null

        saveOrderList()//並び順を保存する
    }

    override fun onRestart() {
        super.onRestart()
        Log.d("method","onRestart")
        if (isRestart && isBackground && pass){
            val intent = Intent(this@ListActivity,AuthActivity::class.java)
            intent.putExtra("act",1)
            startActivity(intent)
        }
        reviewDialog()//レビューダイアログを出すか確認
    }

    override fun onSaveInstanceState(outState: Bundle) {
        super.onSaveInstanceState(outState)
        outState.putStringArray("parent",parentDirectory.toTypedArray())
        outState.putString("directory",directory)
    }

    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        menuInflater.inflate(R.menu.menu,menu)
        multipleDeleteIcon = menu!!.findItem(R.id.action_multi_delete)
        multipleMoveIcon = menu.findItem(R.id.action_multi_move)
        multipleDeleteIcon.isVisible = false
        multipleMoveIcon.isVisible = false
        return true
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        when(item.itemId){
            R.id.action_set -> {//設定画面へ
                folderEditMode = false//フォルダ編集を終了
                if(multipleSelectionMode){
                    changeMultipleSelectionMode(false)//複数選択を終了
                }
                isBackground = false
                val intent = Intent(this,SettingActivity::class.java)
                startActivity(intent)
            }
            R.id.action_multi_delete -> {//複数削除
                showCustomDialog(19)
            }
            R.id.action_multi_move -> {//複数移動
                showCustomDialog(20)
            }
        }
        return super.onOptionsItemSelected(item)
    }

    override fun onBackPressed() {//端末のバックボタン押下時
        if (isDrawer){//ドロワーが開いている時はドロワーを閉じる
            drawerLayout.closeDrawer(GravityCompat.START)
        }else if (multipleSelectionMode){//複数選択モードの時は終了する
            Toast.makeText(this,R.string.msg_multiple_mode_off,Toast.LENGTH_SHORT).show()
            changeMultipleSelectionMode(false)//複数選択を終了
        }else if (folderEditMode){//フォルダ編集モードの時は終了する
            Toast.makeText(this,R.string.msg_directory_edit_finish,Toast.LENGTH_SHORT).show()
            folderEditMode = false//フォルダ編集を終了
        }else{
            if (directory.isEmpty() && parentDirectory.isNullOrEmpty()){//ホームディレクトリの時
                Log.d("finish","done")
                finish()
            }else if (parentDirectory.isNullOrEmpty()){//2階目
                directory = ""//ホームディレクトリに変更
                parentDirectory.clear()
                reloadList()
            }else{//3階以降
                directory = parentDirectory.last()//親ディレクトリに変更
                val last = parentDirectory.size - 1
                parentDirectory.removeAt(last)
                reloadList()
            }
        }
    }

    private fun showFab(){//FABを再表示する
        Log.d("method","showFab")
        val behavior = (fab.layoutParams as? CoordinatorLayout.LayoutParams)?.behavior as? FabScrollBehavior?: return
        behavior.slideUp(fab)
    }

    private fun hiddenFab(){//FABを非表示にする
        Log.d("method","hiddenFab")
        val behavior = (fab.layoutParams as? CoordinatorLayout.LayoutParams)?.behavior as? FabScrollBehavior?: return
        behavior.slideDown(fab)
    }

    private fun setPankuzu(){
        pankuzuText = "HOME"
        if (directory != ""){
            for (i in parentDirectory){
                pankuzuText = "$pankuzuText$i/"
            }
        }
        pankuzuText = "$pankuzuText$directory"
        pankuzu.text = pankuzuText
    }

    private fun reloadList(){
        val result = resources.getString(R.string.search_result)
        if (directory.startsWith("/$result")){//検索後メモ閲覧から戻って来た時
            setList(searchWord)
        }else{
            setList("")
        }
        setPankuzu()
    }

    private fun setList(searchWord: String){
        Log.d("method","setList")
        Log.d("parentDir/directory","$parentDirectory/$directory")
        if (directory == "/$trash"){
            hiddenFab()//FABを隠す
            hintPanel.isGone = false//ごみ箱ヒントON
            trashClearText.isGone = false//ごみ箱空ボタンON
        }else{
            showFab()//FAB再表示
            hintPanel.isGone = true//ごみ箱ヒントOFF
            trashClearText.isGone = true//ごみ箱空ボタンOFF
        }
        recyclerView = findViewById<RecyclerView>(R.id.recyclerListView)
        adapter = CustomAdapter(createList(searchWord))//検索ワード

        recyclerView?.setHasFixedSize(true)
        recyclerView?.layoutManager = LinearLayoutManager(this)
        recyclerView?.adapter = adapter
        if (state != null){
            recyclerView?.layoutManager?.onRestoreInstanceState(state)//保存したスクロール位置の復元
        }

        ith.attachToRecyclerView(recyclerView)//並べ替えヘルパーをセット

        //クリックリスナー
        adapter.setOnItemClickListener(object:CustomAdapter.OnItemClickListener{
            override fun onItemClickListener(view: View, itemData: ItemData, position: Int) {
                Log.d("Tap",itemData.fileName + itemData.sort)
                if (itemData.isDirectory){//フォルダタップ時
                    if (folderEditMode){//フォルダ編集
                        directoryName = itemData.fileName.removeSuffix(".dir")
                        showCustomDialog(4)
                        folderEditMode = false
                    }else if(multipleSelectionMode){//複数選択モード
                        //何もしない
                    }else{//ディレクトリ移動
                        parentDirectory.add(directory)//親ディレクトリを保持
                        directory = itemData.fileName.removeSuffix(".dir")//ディレクトリを変更
                        state = recyclerView?.layoutManager?.onSaveInstanceState()//スクロール位置の保存

                        reloadList()
                    }
                }else{//ファイルタップ時
                    folderEditMode = false//フォルダ編集を終了
                    if(directory == "/$trash") {
                        trashFileName = itemData.fileName//ファイル名を保持
                        showCustomDialog(11)
                    }else{//メモ閲覧
                        if(multipleSelectionMode){//複数選択モード
                            if (itemData.isLocked){//ロック中のメモは一括操作禁止
                                return
                            }
                            itemData.isSelect = !itemData.isSelect
                            adapter.notifyItemChanged(position)//アイテムの更新
                        }else{
                            val intent = Intent(this@ListActivity, AuthActivity::class.java)
                            intent.putExtra("NAME", itemData.fileName)
                            intent.putExtra("act", 2)
                            intent.putExtra("lock", itemData.isLocked)
                            isBackground = false
                            startActivity(intent)
                        }
                    }
                }
            }
        })
    }

    private fun createList(searchWord: String):List<ItemData>{
        dataList = mutableListOf()//現在ディレクトリにあるファイル
        fullDataList = mutableListOf()//全ディレクトリにあるファイル
        searchDataList = mutableListOf()//検索用ファイル
        directoryNames.clear()//全フォルダ保持を初期化
        directoryNames.add(resources.getString(R.string.directory_name_home))
        val files = File(savePath).listFiles()
        val sdf = SimpleDateFormat("yyyy/MM/dd/HH:mm:ss", Locale.getDefault())
        order = 0

        val prefData = getSharedPreferences("user_data",MODE_PRIVATE)//設定画面以外のデータ
        filesSize = prefData.getInt("pref_key_files_size", 0)//ファイルのsortの最大値
        Log.d("filesSize",filesSize.toString())

        if (files != null){
            files.sort()
            for (i in files.indices) {
                val fileName = files[i].name
                if (files[i].isFile && fileName.endsWith(".txt")) {//メモファイルの場合
                    val filePair = FileController().loadFile(applicationContext, savePath, fileName, charaCode)//タイトルとコンテンツをロード
                    val title = filePair.first
                    val content = filePair.second
                    val lastMod = files[i].lastModified()
                    val lastUpdate = sdf.format(lastMod)

                    val data:ItemData = ItemData().also {
                        it.fileName = fileName
                        it.title = title
                        it.content = content
                        it.time = lastUpdate
                        it.titleStamp = "%.20s".format(title)//表示用タイトル２０文字で切る
                        if (isTimeStamp || directory == "/$trash"){//タイムスタンプ切り替え(ごみ箱では必ず表示)
                            it.timeStamp = lastUpdate
                        }
                        it.sort = FileNameConverter().fileNameToOrder(this,it.fileName)//並び順を受け取る
                        if (it.sort == -1){//並び順が一度も保存されてなければ
                            it.sort = order//インクリメントする変数を渡す
                        }else if (it.sort == -10){//新規ファイルの時は
                            it.sort = filesSize + 1//全ファイル数+1する
                            filesSize ++
                        }
                        it.color = FileNameConverter().fileNameToColor(this,it.fileName)//背景色を受け取る
                        it.path = FileNameConverter().fileNameToDirectory(this,it.fileName)//フォルダを受け取る
                        it.isLocked = FileNameConverter().fileNameToLocked(this,it.fileName)//ロック状態を受け取る
                        it.isDirectory = false
                        it.isSelect = false
                    }
                    order ++
                    var trashDeadLine = false
                    if(data.path == "/$trash"){//ごみ箱内のファイルのとき
                        trashDeadLine = checkTrashDeadLine(data.time)
                    }

                    if (data.path == "/$trash" && trashDeadLine){//期限切れごみ箱内ファイルを消去
                        Log.d("TrashDelete",data.fileName)
                        FileController().deleteFile(this,savePath,data.fileName)
                    }else{
                        fullDataList.add(data)
                        if (directory == data.path){//現在ディレクトリと同じなら
                            dataList.add(data)
                        }
                    }
                }else if(files[i].isFile && fileName.endsWith(".dir")){//ディレクトリの場合
                    val data:ItemData = ItemData().also {
                        it.fileName = fileName
                        it.titleStamp = "%.20s".format(fileName).removeSuffix(".dir")
                        it.timeStamp = "≪"
                        it.sort = FileNameConverter().fileNameToOrder(this,it.fileName)//並び順を受け取る
                        if (it.sort == -1){//並び順が一度も保存されてなければ
                            it.sort = order//インクリメントする変数を渡す
                        }else if (it.sort == -10){//新規ファイルの時は
                            it.sort = filesSize + 1//全ファイル数+1する
                            filesSize ++
                        }
                        it.path = FileNameConverter().fileNameToDirectory(this,it.fileName)//フォルダを受け取る
                        it.isDirectory = true
                        it.isSelect = false
                    }
                    order ++
                    fullDataList.add(data)
                    if (directory == data.path){//現在ディレクトリと同じなら
                        dataList.add(data)
                    }
                    directoryNames.add(data.fileName)//全ディレクトリを保持
                    Log.d("dir","$directory*${data.path}")
                }
            }

            if (directory != "/$trash") {//ごみ箱以外
                when (sortOrder) {//ソート
                    "1" -> dataList.sortWith(compareBy { it.title })//タイトル昇順
                    "2" -> {
                        dataList.sortWith(compareBy { it.title })//タイトル降順
                        dataList.reverse()
                    }
                    "3" -> dataList.sortWith(compareBy { it.time })//更新日昇順
                    "4" -> {
                        dataList.sortWith(compareBy { it.time })//更新日降順
                        dataList.reverse()
                    }
                    "5" -> dataList.sortWith(compareBy { it.sort })//カスタム
                }
            }else{//ごみ箱
                dataList.sortWith(compareBy { it.time })//更新日降順
                dataList.reverse()
                var listSize = dataList.size
                while (listSize > trashLimit){
                    Log.d("trashDrop","$listSize/$trashLimit/${dataList[listSize-1].fileName}")
                    val dropFileName = dataList[listSize-1].fileName//保持しておく
                    fullDataList.remove(dataList[listSize-1])//全データリストからも外す
                    dataList.removeAt(listSize-1)//リストから除外
                    FileController().deleteFile(this,savePath,dropFileName)//一番古いファイルを削除
                    listSize --
                }
            }
        }else{
            Toast.makeText(this,R.string.msg_savepath_error,Toast.LENGTH_LONG).show()
        }

        saveOrderList()
        saveMax()

        Log.d("dataList","$dataList")
        Log.d("fullDataList","$fullDataList")

        if (searchWord != ""){//検索時
            val regex = Regex(searchWord,RegexOption.IGNORE_CASE)//大文字小文字を区別しない
            val results = fullDataList.filter { it.isDirectory == false && it.path != "/$trash" && (regex.containsMatchIn(it.title) || (regex.containsMatchIn(it.content) && it.isLocked == false)) }//フォルダ除外、ごみ箱内除外、タイトルor非ロック内容で検索
            searchDataList.addAll(results)
            Log.d("searchDataList","$searchDataList")
            return searchDataList
        }

        return dataList
    }

    private fun changeMultipleSelectionMode(isMultipleMode: Boolean){
        if (isMultipleMode){//onにする
            multipleSelectionMode = true
            multipleDeleteIcon.isVisible = true
            multipleMoveIcon.isVisible = true
        }else{//offにする
            multipleSelectionMode = false
            multipleDeleteIcon.isVisible = false
            multipleMoveIcon.isVisible = false
            reloadList()
        }
    }

    private fun simpleCallback() = object : ItemTouchHelper.SimpleCallback(ItemTouchHelper.UP or ItemTouchHelper.DOWN,ItemTouchHelper.LEFT){
        override fun onMove(recyclerView: RecyclerView, viewHolder: RecyclerView.ViewHolder, target: RecyclerView.ViewHolder): Boolean {
            Log.d("method","onMove")
            if (sortOrder == "5" && directory != "/$trash" && !multipleSelectionMode){
                val fromPos = viewHolder.adapterPosition
                val toPos = target.adapterPosition
                adapter.notifyItemMoved(fromPos,toPos)

                //fromとtoの中身を入れ替える、posが変わる度に呼ばれる
                val fromData = dataList[fromPos]
                dataList.removeAt(fromPos)
                dataList.add(toPos,fromData)

                if (fromPos < toPos)
                    adapter.notifyItemRangeChanged(fromPos,toPos-fromPos+1)
                else
                    adapter.notifyItemRangeChanged(toPos,fromPos-toPos+1)
            }
            return true
        }
        override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {
            //スワイプ時
            Log.d("swiped","${viewHolder.adapterPosition}")
            if (direction == ItemTouchHelper.LEFT){
                adapter.notifyItemChanged(viewHolder.adapterPosition)
            }
            val data = dataList[viewHolder.adapterPosition]
            if (data.isDirectory){//ディレクトリのとき
                if (multipleSelectionMode){//複数選択モードの時は終了する
                    changeMultipleSelectionMode(false)//複数選択を終了
                }
                directoryName = data.fileName.removeSuffix(".dir")
                showCustomDialog(4)
            }
        }
        override fun onChildDraw(c: Canvas, recyclerView: RecyclerView, viewHolder: RecyclerView.ViewHolder, dX: Float, dY: Float, actionState: Int, isCurrentlyActive: Boolean) {
            var newDx = dX
            var newDy = dY
            val item = dataList[viewHolder.adapterPosition]
            if (item.isDirectory){//ディレクトリのとき
                val itemView = viewHolder.itemView
                val swipeIcon = resources.getDrawable(R.drawable.ic_menu_black_24dp)
                val margin = (itemView.height - swipeIcon.intrinsicHeight)/2
                if (newDx < 0f){
                    swipeIcon.setBounds(itemView.right - margin - swipeIcon.intrinsicWidth, itemView.top + margin, itemView.right - margin, itemView.bottom - margin)
                }
                if (newDx <= -90f){
                    newDx = -80f//スワイプしすぎないようにする
                }
                swipeIcon.draw(c)
            }else{//ファイルのとき
                if (newDx != 0f){
                    newDx = 0f//スワイプしないようにする
                }
            }
            if (sortOrder != "5" || directory == "/$trash" || multipleSelectionMode){//並び順がカスタムでないorごみ箱or複数選択中の時は
                if (newDy != 0f){
                    newDy = 0f//並び替えできないようにする
                }
            }
            super.onChildDraw(c, recyclerView, viewHolder, newDx, newDy, actionState, isCurrentlyActive)
        }
        override fun onMoved(recyclerView: RecyclerView, viewHolder: RecyclerView.ViewHolder, fromPos: Int, target: RecyclerView.ViewHolder, toPos: Int, x: Int, y: Int) {
            super.onMoved(recyclerView, viewHolder, fromPos, target, toPos, x, y)
            Log.d("onMoved","$fromPos/$toPos")
            //順番が入れ替わる度に呼ばれる、sortも入れ替える
            val fromItemData = dataList[fromPos]
            val toItemData = dataList[toPos]
            val fromSort = fromItemData.sort
            val toSort = toItemData.sort
            fromItemData.sort = toSort
            toItemData.sort = fromSort
        }
        override fun onSelectedChanged(viewHolder: RecyclerView.ViewHolder?, actionState: Int) {
            super.onSelectedChanged(viewHolder, actionState)
            //長押しで選択されたとき呼ばれる。半透明にする
            if (actionState == ACTION_STATE_DRAG){
                viewHolder?.itemView?.alpha = 0.7f
            }
        }
        override fun clearView(recyclerView: RecyclerView, viewHolder: RecyclerView.ViewHolder) {
            super.clearView(recyclerView, viewHolder)
            //長押しでの選択が解除されたときに呼ばれる
            viewHolder.itemView.alpha = 1.0f
            saveOrderList()
        }
    }

    private fun saveOrderList(){//並び順を含むリストを渡して保存
        Log.d("method","saveOrder")
        if (sortOrder == "5" && directory != "/$trash" && !multipleSelectionMode){
            val prefData = getSharedPreferences("user_data",MODE_PRIVATE)
            val orderJsonMap = prefData.getString("pref_key_order", "")
            val gson = Gson().newBuilder().setFieldNamingPolicy(FieldNamingPolicy.IDENTITY).create()

            val sortMap:MutableMap<String,Int>

            if (orderJsonMap.isNullOrEmpty()){//prefにmapが保存されていなければ新しく作る
                sortMap = mutableMapOf()
            }else{
                sortMap = gson.fromJson<MutableMap<String,Int>>(orderJsonMap, object : TypeToken<MutableMap<String, Int>>(){}.type)
            }

            if (::fullDataList.isInitialized){//dataListが初期化されているか確認
                for (i in fullDataList){
                    sortMap[i.fileName] = i.sort
                }
                val orderList = gson.toJson(sortMap)
                Log.d("orderListSaved",orderList.toString())
                getSharedPreferences("user_data", Context.MODE_PRIVATE).edit().apply{
                    putString("pref_key_order",orderList.toString())
                    commit()
                }
            }
        }
    }

    private fun saveMax(){//sort最大値の保存
        if (!fullDataList.isNullOrEmpty()){//sort保存
            fullDataList.sortWith(compareBy{ it.sort})
            val lastFile:ItemData = fullDataList.last()//sortの一番大きい数字のファイル
            val max = lastFile.sort//sortの最大値を取り出す
            filesSize = max
            getSharedPreferences("user_data", Context.MODE_PRIVATE).edit().apply{
                putInt("pref_key_files_size",filesSize)
                commit()
            }
            Log.d("maxSaved",max.toString())
        }
    }

    private fun checkTrashDeadLine(lastUpdate:String):Boolean{//ごみ箱内のファイルの保管期限を確認する
        val sdf = SimpleDateFormat("yyyy/MM/dd/HH:mm:ss", Locale.getDefault())
        val today = Date()
        Log.d("Today",today.toString())

        val trashDate = sdf.parse(lastUpdate)//削除された時間
        Log.d("TrashDate",trashDate!!.toString())

        val calendar = Calendar.getInstance()
        calendar.time = trashDate
        calendar.add(Calendar.DAY_OF_MONTH,trashDeadLine)//削除から通常3日後の日付
        val limit = calendar.time
        Log.d("limit", limit.toString())

        val check = limit.before(today)
        Log.d("TrashCheck",check.toString())

        return check
    }


    // FABを再表示するためにHideBottomViewOnScrollBehaviorのslideUp/Downをオーバーライドする
    class FabScrollBehavior<V:View>(context: Context?, attrs: AttributeSet?):HideBottomViewOnScrollBehavior<V>(context,attrs){
        public override fun slideDown(child: V) {
            super.slideDown(child)
        }
        public override fun slideUp(child: V) {
            super.slideUp(child)
        }
    }
}
